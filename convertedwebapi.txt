



I'll help you convert this WCF project to a Web API using .NET 8.0. Here's the complete structure:

1. **First, create a new Web API project:**
```batch
dotnet new webapi -n OnlineCourseAPI -f net8.0
cd OnlineCourseAPI
```

2. **Project Structure:**
```
OnlineCourseAPI/
├── Controllers/
│   ├── CourseController.cs
│   ├── StudentController.cs
│   └── EnrollmentController.cs
├── Models/
│   ├── Student.cs
│   ├── Course.cs
│   └── Enrollment.cs
├── Data/
│   └── ApplicationDbContext.cs
├── Services/
│   ├── Interfaces/
│   │   ├── ICourseService.cs
│   │   ├── IStudentService.cs
│   │   └── IEnrollmentService.cs
│   └── Implementations/
│       ├── CourseService.cs
│       ├── StudentService.cs
│       └── EnrollmentService.cs
├── appsettings.json
├── Program.cs
└── OnlineCourseAPI.csproj
```

3. **Models:**

`Models/Student.cs`:
```csharp
namespace OnlineCourseAPI.Models
{
    public class Student
    {
        public int Id { get; set; }
        public string Name { get; set; } = string.Empty;
        public string Email { get; set; } = string.Empty;
        public List<Enrollment> Enrollments { get; set; } = new();
    }
}
```

`Models/Course.cs`:
```csharp
namespace OnlineCourseAPI.Models
{
    public class Course
    {
        public int Id { get; set; }
        public string Name { get; set; } = string.Empty;
        public List<Enrollment> Enrollments { get; set; } = new();
    }
}
```

`Models/Enrollment.cs`:
```csharp
namespace OnlineCourseAPI.Models
{
    public class Enrollment
    {
        public int StudentId { get; set; }
        public Student? Student { get; set; }
        public int CourseId { get; set; }
        public Course? Course { get; set; }
    }
}
```

4. **DbContext:**

`Data/ApplicationDbContext.cs`:
```csharp
using Microsoft.EntityFrameworkCore;
using OnlineCourseAPI.Models;

namespace OnlineCourseAPI.Data
{
    public class ApplicationDbContext : DbContext
    {
        public ApplicationDbContext(DbContextOptions<ApplicationDbContext> options)
            : base(options)
        {
        }

        public DbSet<Student> Students { get; set; }
        public DbSet<Course> Courses { get; set; }
        public DbSet<Enrollment> Enrollments { get; set; }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<Enrollment>()
                .HasKey(e => new { e.StudentId, e.CourseId });

            modelBuilder.Entity<Enrollment>()
                .HasOne(e => e.Student)
                .WithMany(s => s.Enrollments)
                .HasForeignKey(e => e.StudentId);

            modelBuilder.Entity<Enrollment>()
                .HasOne(e => e.Course)
                .WithMany(c => c.Enrollments)
                .HasForeignKey(e => e.CourseId);
        }
    }
}
```

5. **Service Interfaces:**

`Services/Interfaces/IStudentService.cs`:
```csharp
using OnlineCourseAPI.Models;

namespace OnlineCourseAPI.Services.Interfaces
{
    public interface IStudentService
    {
        Task<Student?> GetStudentAsync(int id);
        Task<IEnumerable<Student>> GetAllStudentsAsync();
        Task<Student> RegisterStudentAsync(Student student);
        Task<IEnumerable<Course>> GetStudentCoursesAsync(int studentId);
    }
}
```

6. **Service Implementations:**

`Services/Implementations/StudentService.cs`:
```csharp
using Microsoft.EntityFrameworkCore;
using OnlineCourseAPI.Data;
using OnlineCourseAPI.Models;
using OnlineCourseAPI.Services.Interfaces;

namespace OnlineCourseAPI.Services.Implementations
{
    public class StudentService : IStudentService
    {
        private readonly ApplicationDbContext _context;

        public StudentService(ApplicationDbContext context)
        {
            _context = context;
        }

        public async Task<Student?> GetStudentAsync(int id)
        {
            return await _context.Students.FindAsync(id);
        }

        public async Task<IEnumerable<Student>> GetAllStudentsAsync()
        {
            return await _context.Students.ToListAsync();
        }

        public async Task<Student> RegisterStudentAsync(Student student)
        {
            _context.Students.Add(student);
            await _context.SaveChangesAsync();
            return student;
        }

        public async Task<IEnumerable<Course>> GetStudentCoursesAsync(int studentId)
        {
            return await _context.Enrollments
                .Where(e => e.StudentId == studentId)
                .Select(e => e.Course!)
                .ToListAsync();
        }
    }
}
```

7. **Controllers:**

`Controllers/StudentController.cs`:
```csharp
using Microsoft.AspNetCore.Mvc;
using OnlineCourseAPI.Models;
using OnlineCourseAPI.Services.Interfaces;

namespace OnlineCourseAPI.Controllers
{
    [ApiController]
    [Route("api/[controller]")]
    public class StudentController : ControllerBase
    {
        private readonly IStudentService _studentService;

        public StudentController(IStudentService studentService)
        {
            _studentService = studentService;
        }

        [HttpGet("{id}")]
        public async Task<ActionResult<Student>> GetStudent(int id)
        {
            var student = await _studentService.GetStudentAsync(id);
            if (student == null)
            {
                return NotFound();
            }
            return student;
        }

        [HttpGet]
        public async Task<ActionResult<IEnumerable<Student>>> GetAllStudents()
        {
            return Ok(await _studentService.GetAllStudentsAsync());
        }

        [HttpPost]
        public async Task<ActionResult<Student>> RegisterStudent(Student student)
        {
            var registeredStudent = await _studentService.RegisterStudentAsync(student);
            return CreatedAtAction(nameof(GetStudent), new { id = registeredStudent.Id }, registeredStudent);
        }

        [HttpGet("{id}/courses")]
        public async Task<ActionResult<IEnumerable<Course>>> GetStudentCourses(int id)
        {
            return Ok(await _studentService.GetStudentCoursesAsync(id));
        }
    }
}
```

8. **Program.cs:**
```csharp
using Microsoft.EntityFrameworkCore;
using OnlineCourseAPI.Data;
using OnlineCourseAPI.Services.Implementations;
using OnlineCourseAPI.Services.Interfaces;

var builder = WebApplication.CreateBuilder(args);

// Add services to the container.
builder.Services.AddControllers();
builder.Services.AddEndpointsApiExplorer();
builder.Services.AddSwaggerGen();

// Add DB Context
builder.Services.AddDbContext<ApplicationDbContext>(options =>
    options.UseMySql(
        builder.Configuration.GetConnectionString("DefaultConnection"),
        ServerVersion.AutoDetect(builder.Configuration.GetConnectionString("DefaultConnection"))
    ));

// Add Services
builder.Services.AddScoped<IStudentService, StudentService>();
// Add other services...

var app = builder.Build();

// Configure the HTTP request pipeline.
if (app.Environment.IsDevelopment())
{
    app.UseSwagger();
    app.UseSwaggerUI();
}

app.UseHttpsRedirection();
app.UseAuthorization();
app.MapControllers();

app.Run();
```

9. **appsettings.json:**
```json
{
  "ConnectionStrings": {
    "DefaultConnection": "Server=localhost;Database=CourseManagementDB;User=root;Password=your_password;"
  },
  "Logging": {
    "LogLevel": {
      "Default": "Information",
      "Microsoft.AspNetCore": "Warning"
    }
  },
  "AllowedHosts": "*"
}
```

10. **OnlineCourseAPI.csproj:**
```xml
<Project Sdk="Microsoft.NET.Sdk.Web">

  <PropertyGroup>
    <TargetFramework>net8.0</TargetFramework>
    <Nullable>enable</Nullable>
    <ImplicitUsings>enable</ImplicitUsings>
  </PropertyGroup>

  <ItemGroup>
    <PackageReference Include="Microsoft.AspNetCore.OpenApi" Version="8.0.0" />
    <PackageReference Include="Microsoft.EntityFrameworkCore" Version="8.0.0" />
    <PackageReference Include="Microsoft.EntityFrameworkCore.Design" Version="8.0.0">
      <IncludeAssets>runtime; build; native; contentfiles; analyzers; buildtransitive</IncludeAssets>
      <PrivateAssets>all</PrivateAssets>
    </PackageReference>
    <PackageReference Include="Pomelo.EntityFrameworkCore.MySql" Version="8.0.0-beta.2" />
    <PackageReference Include="Swashbuckle.AspNetCore" Version="6.4.0" />
  </ItemGroup>

</Project>
```

